UITLEG:

Een heel belangrijk aspect van security zijn wachtwoorden. Wachtwoorden zijn ontstaan met de 
bedoeling persoonlijke gegevens af te schermen van anderen die hier geen toegang tot mogen hebben.
Het idee van een wachtwoord gaat al heel lang mee en wordt vandaag de dag nog steeds gebruikt.
Naast dat een wachtwoord een uitstekend middel is om aan authenticatie te doen, is het
controlleren en gebruiken van wachtwoorden over het internet minder ideaal.

Wanneer we wachtwoorden open over het internet zouden versturen kan iemand met slechte 
bedoelingen dit onderscheppen.
Daarom is het nodig dat we er alles aan doen om te voorkomen dat deze wachtwoorden onderschept
kunnen worden.

OPLOSSING:

Een mogelijke oplossing voor dit probleem is het hashen van het wachtwoord.
Bij het hashen van een wachtwoord gebruiken we een speciaal algoritme dat het wachtwoord zo 
omvormd dat het onherkenbaar is. Het voordeel van dergelijke speciale algoritmes is da deze
slechts in 1 richting werken waardoor je uit het gehashte wachtwoord niet zomaar het originele
wachtwoord kan halen.
Het hashen van een wachtwoord alleen is niet veilig genoeg. In het verleden zijn hackers er al 
verschillende keren in geslaagd om uit de hash toch het originele wachtwoord te vinden.

De oplossing hierop is om gebruik te maken van een salt. 
Een salt is specifiek woord of nummer dat bij het wachtwoord wordt geplakt alvorens het geheel
gehasht wordt. Doordat we nu 2 parameters gebruiken wordt het vinden van het wachtwoord meteen
veel moeilijker. Wanneer je de geheel van salt en wachtwoord vindt moet je nog steeds weten wat 
precies de salt en wat precies het wachtwoord is.

Omdat hackers altijd opnieuw proberen om nieuwe algoritmes te kraken worden ook telkens nieuwe 
algoritmes ontwikkeld. 
Wanneer je password hashing wilt gebruiken in php kan je eenvoudig gebruik maken van de
ingebouwde password_hash() functie.
Op voorwaarde dat je steeds de meest recente versie van PHP gebruikt, zal je ook steeds het
meest veilige algoritme gebruiken.
